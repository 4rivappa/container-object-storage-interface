---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: {{ index . "name" }}
  labels:
    protocol: {{ index . "protocol" }}
    authenticationType: {{ index . "authenticationType" }}
    deletionPolicy: {{ index . "deletionPolicy" }}
spec:
  template: true
  steps:
  - name: Check if COSI Controller exist
    try:
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: objectstorage-controller
            namespace: default
          status:
            availableReplicas: 1
  - name: Create test BucketClass and BucketAccessClass
    try:
    - apply:
        file: ./resources/BucketClass.yaml
    - apply:
        file: ./resources/BucketAccessClass.yaml
  - name: Create BucketClaim
    try:
    - apply:
        file: ./resources/BucketClaim.yaml
  - name: Check if BucketClaim is ready
    try:
    - assert:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketClaim
          metadata:
            name: {{ index . "name" }}
          status:
            bucketReady: true
  - name: Create BucketAccess
    try:
    - apply:
        file: ./resources/BucketAccess.yaml
  - name: Check if BucketAccess is granted
    try:
    - assert:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketAccess
          metadata:
            name: {{ index . "name" }}
          status:
            accessGranted: true
  - name: Check if Secret exists
    try:
    - assert:
        resource:
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ index . "name" }}
  - name: Run ObjectStorage validation tool
    # TODO: This should be either a standalone test tool developed by us, to run test suite:
    # - validate Secret format;
    # - validate connectivity to the Object Storage server;
    # Right now it is using busybox to check if the secret has correct format.
    try:
    - apply:
        resource:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: validation
          data:
            schema.json: |
              {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "bucketName": {
                        "type": "string"
                      },
                      "authenticationType": {
                        "type": "string",
                        "enum": ["IAM", "Key"]
                      },
                      "protocols": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": ["S3", "Azure", "GCP"]
                        },
                        "minItems": 1
                      },
                      "secretS3": {
                        "type": "object",
                        "properties": {
                          "endpoint": {
                            "type": "string"
                          },
                          "region": {
                            "type": "string"
                          },
                          "accessKeyID": {
                            "type": "string"
                          },
                          "accessSecretKey": {
                            "type": "string"
                          }
                        },
                        "required": ["endpoint", "region", "accessKeyID", "accessSecretKey"]
                      },
                      "secretAzure": {
                        "type": "object",
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "expiryTimeStamp": {
                            "type": "string"
                          }
                        },
                        "required": ["accessToken", "expiryTimeStamp"]
                      }
                    },
                    "required": ["bucketName", "authenticationType", "protocols"],
                    "oneOf": [
                      { "required": ["secretS3"] },
                      { "required": ["secretAzure"] }
                    ]
                  }
                },
                "required": ["spec"]
              }
            validator.sh: |
              #!/usr/bin/env sh
              pip install check-jsonschema
              check-jsonschema --schema /validator/schema.json /conf/BucketInfo.json
    - create:
        resource:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: {{ index . "name" }}
          spec:
            ttlSecondsAfterFinished: 100
            template:
              spec:
                restartPolicy: Never
                containers:
                - name: secret-test
                  image: docker.io/library/python:alpine # "latest" style tag, to prevent manual updates
                  command: [ "sh", "/validation/validation.sh" ]
                  volumeMounts:
                  - mountPath: /validation
                    name: validation
                  - mountPath: /conf
                    name: secret-vol
                volumes:
                - name: validation
                  configMap:
                    name: validation
                - name: secret-vol
                  secret:
                    secretName: {{ index . "name" }}
                    items:
                    - iam: BucketInfo
                      path: BucketInfo.json
  - name: Check if ObjectStorage validation tool completed succesfully
    try:
    - assert:
        resource:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: {{ index . "name" }}
          status:
            succeeded: 1
